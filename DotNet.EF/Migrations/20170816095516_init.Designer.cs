// <auto-generated />
using DotNet.EF;
using DotNet.Model.Enum;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DotNet.EF.Migrations
{
    [DbContext(typeof(DotNetDbContext))]
    [Migration("20170816095516_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DotNet.Model.Entity.Button", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionNameCode")
                        .IsRequired()
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<DateTime>("AddDate");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Icon")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(8)
                        .IsUnicode(true);

                    b.Property<int>("Sort");

                    b.HasKey("Id");

                    b.ToTable("Button");
                });

            modelBuilder.Entity("DotNet.Model.Entity.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddDate");

                    b.Property<int>("DepartmentLevel");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(24)
                        .IsUnicode(true);

                    b.Property<bool>("HaveChild");

                    b.Property<int>("ParentId");

                    b.Property<int>("Sort");

                    b.HasKey("Id");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("DotNet.Model.Entity.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionNameCode")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<DateTime>("AddDate");

                    b.Property<string>("ControllerNameCode")
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<bool>("HaveChild");

                    b.Property<string>("Icon")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<int>("MenuLevel");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(true);

                    b.Property<int>("ParentId");

                    b.Property<int>("Sort");

                    b.HasKey("Id");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("DotNet.Model.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddDate");

                    b.Property<int>("DepartmentId");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<DateTime>("ModifyDate");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("DotNet.Model.Entity.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("LoginAccount")
                        .IsRequired()
                        .HasMaxLength(24)
                        .IsUnicode(false);

                    b.Property<string>("LoginPwd")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false);

                    b.Property<int>("UserState");

                    b.HasKey("Id");

                    b.ToTable("UserAccount");
                });

            modelBuilder.Entity("DotNet.Model.RefMenuButton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ButtonId");

                    b.Property<int>("MenuId");

                    b.HasKey("Id");

                    b.ToTable("RefMenuButton");
                });

            modelBuilder.Entity("DotNet.Model.RefRoleMenuButton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ButtonId");

                    b.Property<int>("MenuId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("RefRoleMenuButton");
                });

            modelBuilder.Entity("DotNet.Model.RefUserDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DepartmentId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("RefUserDepartment");
                });

            modelBuilder.Entity("DotNet.Model.RefUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("RefUserRole");
                });

            modelBuilder.Entity("DotNet.Model.UserDetail", b =>
                {
                    b.Property<int>("UserAccountId");

                    b.Property<string>("Address")
                        .HasMaxLength(48)
                        .IsUnicode(true);

                    b.Property<DateTime>("Birth");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.Property<bool>("Gender");

                    b.Property<string>("NickName")
                        .HasMaxLength(16)
                        .IsUnicode(true);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .IsUnicode(false);

                    b.HasKey("UserAccountId");

                    b.ToTable("UserDetail");
                });

            modelBuilder.Entity("DotNet.Model.UserDetail", b =>
                {
                    b.HasOne("DotNet.Model.Entity.UserAccount")
                        .WithOne("UserDetail")
                        .HasForeignKey("DotNet.Model.UserDetail", "UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
